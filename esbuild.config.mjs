import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules'
import fs from 'fs'

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

let renamePlugin = {
    name: 'rename-styles', setup(build) {
        build.onEnd(() => {
            const { outfile } = build.initialOptions;
            const outCss = outfile.replace(/\.js$/, '.css');
            const fixCss = outfile.replace(/main\.js$/, 'styles.css');
            if (fs.existsSync(outCss)) {
                console.log('Renaming', outCss, 'to', fixCss);
                fs.renameSync(outCss, fixCss);
            }
        });
    },
};

const context = await esbuild.context({
    banner: {
        js: banner,
    },
    entryPoints: ["main.ts"],
    bundle: true,
    external: [
        'obsidian',
        'electron',
        '@codemirror/autocomplete',
        '@codemirror/collab',
        '@codemirror/commands',
        '@codemirror/language',
        '@codemirror/lint',
        '@codemirror/search',
        '@codemirror/state',
        '@codemirror/view',
        '@lezer/common',
        '@lezer/highlight',
        '@lezer/l',
        ...builtins,
    ],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
    plugins: [renamePlugin],
});

if (prod) {
    await context.rebuild();
    process.exit(0);
} else {
    await context.watch();
}
